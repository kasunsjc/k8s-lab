name: 🔶 Verify Kind Cluster Setup

on:
  schedule:
    # Run daily at 08:00 UTC
    - cron: '0 8 * * *'
  push:
    branches: [ main, master ]
    paths:
      - 'kind-lab/**'
      - 'demo-app/**'
      - 'k8s-lab.sh'
      - '.github/workflows/verify-kind-cluster.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'kind-lab/**'
      - 'demo-app/**'
      - 'k8s-lab.sh'
      - '.github/workflows/verify-kind-cluster.yml'
  workflow_dispatch:
  workflow_call:

jobs:
  verify-kind-setup:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 📦 Install Kind
      run: |
        # Install Kind
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        
        # Verify installation
        kind version

    - name: 🔧 Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/kubectl
        
        # Verify installation
        kubectl version --client

    - name: 🚀 Set up Kind cluster
      run: |
        echo "🔶 Setting up Kind cluster for verification..."
        cd kind-lab
        chmod +x setup-kind.sh
        ./setup-kind.sh ci-test-cluster
        
        # Fix metrics-server for Kind (needs insecure TLS)
        echo "🔧 Configuring metrics-server for Kind..."
        kubectl patch deployment metrics-server -n kube-system --type='json' \
          -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'
        
        # Restart metrics-server to apply the changes
        kubectl rollout restart deployment/metrics-server -n kube-system

    - name: ✅ Verify cluster is running
      run: |
        echo "🔍 Checking cluster status..."
        kubectl cluster-info --context kind-ci-test-cluster
        
        echo "📊 Checking node status..."
        kubectl get nodes -o wide
        
        echo "🧩 Checking system pods..."
        kubectl get pods -A
        
        # Wait for essential system pods to be ready (excluding metrics-server which can be slow)
        echo "⏳ Waiting for essential system pods to be ready..."
        kubectl wait --for=condition=Ready pods -l k8s-app=kube-dns -n kube-system --timeout=300s
        kubectl wait --for=condition=Ready pods -l component=kube-apiserver -n kube-system --timeout=300s
        kubectl wait --for=condition=Ready pods -l component=kube-controller-manager -n kube-system --timeout=300s
        kubectl wait --for=condition=Ready pods -l component=kube-scheduler -n kube-system --timeout=300s
        kubectl wait --for=condition=Ready pods -l k8s-app=kube-proxy -n kube-system --timeout=300s
        kubectl wait --for=condition=Ready pods -l app=kindnet -n kube-system --timeout=300s
        
        # Check metrics-server separately with a longer timeout after configuration
        echo "📊 Waiting for metrics-server to be ready after configuration..."
        kubectl rollout status deployment/metrics-server -n kube-system --timeout=300s
        if kubectl wait --for=condition=Ready pods -l k8s-app=metrics-server -n kube-system --timeout=180s; then
            echo "✅ Metrics server is ready"
        else
            echo "⚠️ Metrics server not ready yet, checking logs..."
            kubectl describe pods -l k8s-app=metrics-server -n kube-system || true
            kubectl logs -l k8s-app=metrics-server -n kube-system --tail=50 || true
            echo "⚠️ Continuing without metrics-server (demo apps will still work)"
        fi
        
        echo "✅ Essential cluster components are ready!"

    - name: 📊 Test metrics server
      run: |
        echo "📊 Testing metrics server functionality..."
        
        # Wait a bit for metrics to be collected
        echo "⏳ Waiting for metrics to be collected..."
        sleep 30
        
        # Test node metrics
        if kubectl top nodes; then
            echo "✅ Node metrics are working"
        else
            echo "⚠️ Node metrics not yet available"
        fi
        
        # Test pod metrics  
        if kubectl top pods -A; then
            echo "✅ Pod metrics are working"
        else
            echo "⚠️ Pod metrics not yet available"
        fi

    - name: 🎯 Deploy demo application
      run: |
        echo "🚀 Deploying demo application..."
        cd demo-app
        chmod +x deploy-demo.sh
        ./deploy-demo.sh kind ci-test-cluster
        
        echo "⏳ Waiting for demo pods to be ready..."
        kubectl wait --for=condition=Ready pods -l app=microservices-demo --timeout=300s

    - name: 🧪 Test demo application
      run: |
        echo "🧪 Testing demo application functionality..."
        
        # First, check what pods are actually running
        echo "📊 Current pods in default namespace:"
        kubectl get pods -o wide
        
        # Check if microservices-demo deployment exists and is ready
        echo "🔍 Checking microservices-demo deployment status..."
        kubectl get deployment microservices-demo
        kubectl describe deployment microservices-demo
        
        # Get demo app pod with correct label
        echo "🔍 Looking for microservices-demo pods..."
        if ! kubectl get pods -l app=microservices-demo --no-headers | grep -q "Running"; then
            echo "❌ No running microservices-demo pods found"
            echo "📊 All pods in default namespace:"
            kubectl get pods -A
            echo "📝 Deployment logs:"
            kubectl logs deployment/microservices-demo --tail=50 || true
            exit 1
        fi
        
        POD_NAME=$(kubectl get pods -l app=microservices-demo -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
        if [ -z "$POD_NAME" ]; then
            echo "❌ Could not find microservices-demo pod"
            exit 1
        fi
        
        echo "Demo app pod: $POD_NAME"
        
        # Test pod is running
        kubectl get pod $POD_NAME
        
        # Test service is accessible (port-forward and test)
        echo "🌐 Testing service accessibility..."
        kubectl port-forward svc/frontend 8080:80 &
        PF_PID=$!
        sleep 10
        
        # Test HTTP response
        echo "🔗 Testing HTTP endpoint..."
        if curl -f -s http://localhost:8080 > /dev/null; then
            echo "✅ Demo app is responding correctly"
        else
            echo "❌ Demo app is not responding"
            echo "🔍 Service details:"
            kubectl describe svc/frontend
            echo "🔍 Pod logs:"
            kubectl logs $POD_NAME --tail=20 || true
            kill $PF_PID || true
            exit 1
        fi
        
        # Clean up port-forward
        kill $PF_PID || true

    - name: 🏗️ Test advanced demos
      run: |
        echo "🏗️ Testing advanced demo deployments..."
        cd demo-app/advanced-demos
        chmod +x deploy-advanced-demos.sh
        
        # Test each demo individually
        echo "Testing ConfigMap/Secret demo..."
        ./deploy-advanced-demos.sh kind ci-test-cluster configmap
        kubectl wait --for=condition=Ready pods -l app=configmap-secret-demo --timeout=180s
        
        echo "Testing StatefulSet demo..."
        ./deploy-advanced-demos.sh kind ci-test-cluster stateful
        kubectl wait --for=condition=Ready pods -l app=mongodb --timeout=300s
        
        echo "Testing HPA demo..."
        ./deploy-advanced-demos.sh kind ci-test-cluster hpa
        kubectl wait --for=condition=Ready pods -l app=hpa-demo --timeout=180s

    - name: 🔍 Final cluster verification
      run: |
        echo "🔍 Final verification of cluster health..."
        kubectl get all -A
        kubectl top nodes || echo "Metrics server might not be fully ready yet"
        
        echo "📊 Resource usage summary:"
        kubectl describe nodes

    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up resources..."
        kind delete cluster --name ci-test-cluster || true
        docker system prune -f || true

    - name: 📊 Report Results
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Kind cluster verification PASSED"
        else
          echo "❌ Kind cluster verification FAILED"
        fi
