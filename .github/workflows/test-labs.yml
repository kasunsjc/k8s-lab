name: üß™ Test Minikube and Kind Labs (Enhanced)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'k8s-lab.ps1'
      - 'minikube-lab/**'
      - 'kind-lab/**'
      - 'demo-app/**'
      - '.github/workflows/test-labs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'k8s-lab.ps1'
      - 'minikube-lab/**'
      - 'kind-lab/**'
      - 'demo-app/**'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment'
        required: true
        default: 'both'
        type: choice
        options:
          - minikube
          - kind
          - both
      test_depth:
        description: 'Test depth level'
        required: false
        default: 'standard'
        type: choice
        options:
          - syntax
          - standard
          - comprehensive
      skip_cluster_creation:
        description: 'Skip actual cluster creation (syntax only)'
        required: false
        default: false
        type: boolean
      enable_debugging:
        description: 'Enable detailed debugging output'
        required: false
        default: false
        type: boolean

env:
  MINIKUBE_VERSION: 'v1.33.1'
  KIND_VERSION: 'v0.20.0'
  KUBECTL_VERSION: 'v1.30.0'

jobs:
  # Job 1: Test Minikube Lab
  test-minikube-lab:
    runs-on: windows-latest
    name: Test Minikube Lab
    if: github.event.inputs.test_environment == 'minikube' || github.event.inputs.test_environment == 'both' || github.event.inputs.test_environment == ''
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup environment
      shell: pwsh
      run: |
        Write-Host "üîß Setting up test environment..." -ForegroundColor Cyan
        Write-Host "PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow
        Write-Host "OS: $([System.Environment]::OSVersion.VersionString)" -ForegroundColor Yellow
        Write-Host "Docker Desktop will be configured for testing" -ForegroundColor Yellow
        
    - name: Install dependencies
      shell: pwsh
      run: |
        Write-Host "üì¶ Installing dependencies..." -ForegroundColor Cyan
        
        # Set execution policy
        Set-ExecutionPolicy Bypass -Scope Process -Force
        
        # Install Chocolatey if not present
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Chocolatey..." -ForegroundColor Yellow
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        }
        
        # Install required tools
        Write-Host "Installing Minikube..." -ForegroundColor Yellow
        choco install minikube -y --version=${{ env.MINIKUBE_VERSION }}
        
        Write-Host "Installing kubectl..." -ForegroundColor Yellow
        choco install kubernetes-cli -y
        
        Write-Host "Installing Docker Desktop..." -ForegroundColor Yellow
        choco install docker-desktop -y
        
        # Refresh PATH
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
        # Verify installations
        Write-Host "‚úÖ Verifying installations..." -ForegroundColor Green
        minikube version
        kubectl version --client
        docker --version
        
    - name: Start Docker Desktop
      shell: pwsh
      run: |
        Write-Host "üê≥ Starting Docker Desktop..." -ForegroundColor Cyan
        
        # Start Docker Desktop
        Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe" -WindowStyle Hidden
        
        # Enhanced Docker readiness check with consecutive success requirement
        $timeout = 360 # 6 minutes
        $elapsed = 0
        $interval = 15
        $consecutiveSuccess = 0
        
        Write-Host "‚è≥ Waiting for Docker to be ready (enhanced check)..." -ForegroundColor Yellow
        do {
          try {
            docker version | Out-Null
            docker info | Out-Null
            docker ps | Out-Null
            $consecutiveSuccess++
            Write-Host "‚úÖ Docker check passed ($consecutiveSuccess/3)" -ForegroundColor Green
            
            if ($consecutiveSuccess -ge 3) {
              Write-Host "‚úÖ Docker is stable and ready!" -ForegroundColor Green
              break
            }
            
            Start-Sleep -Seconds 5
            $elapsed += 5
          } catch {
            $consecutiveSuccess = 0
            Write-Host "‚è≥ Docker not ready yet... ($elapsed/$timeout seconds)" -ForegroundColor Yellow
            Start-Sleep -Seconds $interval
            $elapsed += $interval
          }
        } while ($elapsed -lt $timeout)
        
        if ($elapsed -ge $timeout) {
          Write-Host "‚ùå Docker failed to start within timeout" -ForegroundColor Red
          exit 1
        }
        
    - name: Test Minikube setup script
      shell: pwsh
      run: |
        Write-Host "üß™ Testing Minikube setup script..." -ForegroundColor Cyan
        
        # Test script syntax first
        try {
          $null = Get-Content "minikube-lab\setup-minikube.ps1" -Raw
          Write-Host "‚úÖ setup-minikube.ps1 syntax is valid" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå setup-minikube.ps1 syntax error: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }
        
        # Skip cluster creation if requested
        if ("${{ github.event.inputs.skip_cluster_creation }}" -eq "true") {
          Write-Host "‚è≠Ô∏è Skipping cluster creation as requested" -ForegroundColor Yellow
          return
        }
        
        # Test cluster creation
        try {
          Write-Host "üöÄ Creating test Minikube cluster..." -ForegroundColor Cyan
          cd minikube-lab
          .\setup-minikube.ps1 github-test-cluster
          
          Write-Host "‚úÖ Minikube cluster created successfully!" -ForegroundColor Green
          
        } catch {
          Write-Host "‚ùå Minikube setup failed: $($_.Exception.Message)" -ForegroundColor Red
          # Don't exit immediately, try to get more info
          minikube logs -p github-test-cluster
          exit 1
        }
        
    - name: Test main k8s-lab script with Minikube
      if: github.event.inputs.skip_cluster_creation != 'true'
      shell: pwsh
      run: |
        Write-Host "üß™ Testing main k8s-lab script with Minikube..." -ForegroundColor Cyan
        
        # Test status command
        Write-Host "Testing status command..." -ForegroundColor Yellow
        .\k8s-lab.ps1 status minikube github-test-cluster
        
        # Test cluster verification
        Write-Host "Verifying cluster accessibility..." -ForegroundColor Yellow
        kubectl get nodes -o wide
        kubectl get pods -A
        
        Write-Host "‚úÖ Main script integration test passed!" -ForegroundColor Green
        
    - name: Enhanced demo application deployment
      if: github.event.inputs.skip_cluster_creation != 'true'
      shell: pwsh
      run: |
        Write-Host "üß™ Enhanced demo application deployment..." -ForegroundColor Cyan
        
        try {
          # Deploy demo app
          Write-Host "Deploying demo application..." -ForegroundColor Yellow
          kubectl apply -f demo-app\demo-app.yaml
          
          # Enhanced waiting with progress monitoring
          Write-Host "Waiting for pods to be ready (enhanced monitoring)..." -ForegroundColor Yellow
          $timeout = 300
          $elapsed = 0
          $interval = 15
          
          do {
            $pods = kubectl get pods -l app=microservices-demo -o jsonpath='{.items[*].status.phase}' 2>$null
            if ($pods) {
              $readyPods = ($pods -split ' ' | Where-Object { $_ -eq 'Running' }).Count
              $totalPods = ($pods -split ' ').Count
              Write-Host "  Ready pods: $readyPods/$totalPods" -ForegroundColor Gray
              
              if ($readyPods -eq $totalPods -and $totalPods -gt 0) {
                Write-Host "‚úÖ All pods are ready!" -ForegroundColor Green
                break
              }
            }
            
            Start-Sleep -Seconds $interval
            $elapsed += $interval
          } while ($elapsed -lt $timeout)
          
          if ($elapsed -ge $timeout) {
            Write-Host "‚ùå Timeout waiting for pods to be ready" -ForegroundColor Red
            kubectl describe pods -l app=microservices-demo
            kubectl get events --sort-by=.metadata.creationTimestamp | Select-Object -Last 10
            exit 1
          }
          
          # Check deployment status
          kubectl get pods -o wide
          kubectl get svc
          
          # Enhanced service accessibility test
          Write-Host "Testing service accessibility..." -ForegroundColor Yellow
          $serviceName = "frontend"
          $serviceIP = kubectl get svc $serviceName -o jsonpath='{.spec.clusterIP}' 2>$null
          
          if ($serviceIP) {
            Write-Host "‚úÖ Service $serviceName is accessible at $serviceIP" -ForegroundColor Green
          } else {
            Write-Host "‚ö†Ô∏è Service IP not found, checking all services..." -ForegroundColor Yellow
            kubectl get svc -o wide
          }
          
          Write-Host "‚úÖ Enhanced demo application deployment test passed!" -ForegroundColor Green
          
        } catch {
          Write-Host "‚ùå Enhanced demo deployment failed: $($_.Exception.Message)" -ForegroundColor Red
          
          # Enhanced error diagnostics
          Write-Host "üîç Enhanced error diagnostics:" -ForegroundColor Yellow
          kubectl describe pods -l app=microservices-demo
          kubectl get events --sort-by=.metadata.creationTimestamp | Select-Object -Last 20
          kubectl get all
          
          exit 1
        }
        
    - name: Cleanup Minikube
      if: always()
      shell: pwsh
      run: |
        Write-Host "üßπ Cleaning up Minikube resources..." -ForegroundColor Cyan
        try {
          minikube delete -p github-test-cluster
          Write-Host "‚úÖ Minikube cleanup completed" -ForegroundColor Green
        } catch {
          Write-Host "‚ö†Ô∏è Minikube cleanup failed (this is expected if cluster creation failed)" -ForegroundColor Yellow
        }

  # Job 2: Test Kind Lab
  test-kind-lab:
    runs-on: windows-latest
    name: Test Kind Lab
    if: github.event.inputs.test_environment == 'kind' || github.event.inputs.test_environment == 'both' || github.event.inputs.test_environment == ''
    timeout-minutes: 25
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup environment
      shell: pwsh
      run: |
        Write-Host "üîß Setting up Kind test environment..." -ForegroundColor Cyan
        Write-Host "PowerShell: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow
        Write-Host "OS: $([System.Environment]::OSVersion.VersionString)" -ForegroundColor Yellow
        
    - name: Install dependencies
      shell: pwsh
      run: |
        Write-Host "üì¶ Installing dependencies for Kind..." -ForegroundColor Cyan
        
        # Set execution policy
        Set-ExecutionPolicy Bypass -Scope Process -Force
        
        # Install Chocolatey if not present
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Chocolatey..." -ForegroundColor Yellow
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        }
        
        # Install required tools
        Write-Host "Installing Kind..." -ForegroundColor Yellow
        choco install kind -y --version=${{ env.KIND_VERSION }}
        
        Write-Host "Installing kubectl..." -ForegroundColor Yellow
        choco install kubernetes-cli -y
        
        Write-Host "Installing Docker Desktop..." -ForegroundColor Yellow
        choco install docker-desktop -y
        
        # Refresh PATH
        $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
        # Verify installations
        Write-Host "‚úÖ Verifying installations..." -ForegroundColor Green
        kind version
        kubectl version --client
        docker --version
        
    - name: Start Docker Desktop
      shell: pwsh
      run: |
        Write-Host "üê≥ Starting Docker Desktop for Kind..." -ForegroundColor Cyan
        
        # Start Docker Desktop
        Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe" -WindowStyle Hidden
        
        # Wait for Docker to be ready
        $timeout = 300 # 5 minutes
        $elapsed = 0
        $interval = 10
        
        Write-Host "‚è≥ Waiting for Docker to be ready..." -ForegroundColor Yellow
        do {
          try {
            docker version | Out-Null
            docker info | Out-Null
            Write-Host "‚úÖ Docker is ready for Kind!" -ForegroundColor Green
            break
          } catch {
            Write-Host "‚è≥ Docker not ready yet... ($elapsed/$timeout seconds)" -ForegroundColor Yellow
            Start-Sleep -Seconds $interval
            $elapsed += $interval
          }
        } while ($elapsed -lt $timeout)
        
        if ($elapsed -ge $timeout) {
          Write-Host "‚ùå Docker failed to start within timeout" -ForegroundColor Red
          exit 1
        }
        
    - name: Test Kind setup script
      shell: pwsh
      run: |
        Write-Host "üß™ Testing Kind setup script..." -ForegroundColor Cyan
        
        # Test script syntax first
        try {
          $null = Get-Content "kind-lab\setup-kind.ps1" -Raw
          Write-Host "‚úÖ setup-kind.ps1 syntax is valid" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå setup-kind.ps1 syntax error: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        }
        
        # Skip cluster creation if requested
        if ("${{ github.event.inputs.skip_cluster_creation }}" -eq "true") {
          Write-Host "‚è≠Ô∏è Skipping cluster creation as requested" -ForegroundColor Yellow
          return
        }
        
        # Test cluster creation
        try {
          Write-Host "üöÄ Creating test Kind cluster..." -ForegroundColor Cyan
          cd kind-lab
          .\setup-kind.ps1 github-test-kind
          
          Write-Host "‚úÖ Kind cluster created successfully!" -ForegroundColor Green
          
        } catch {
          Write-Host "‚ùå Kind setup failed: $($_.Exception.Message)" -ForegroundColor Red
          # Show docker logs for debugging
          docker ps -a
          exit 1
        }
        
    - name: Test main k8s-lab script with Kind
      if: github.event.inputs.skip_cluster_creation != 'true'
      shell: pwsh
      run: |
        Write-Host "üß™ Testing main k8s-lab script with Kind..." -ForegroundColor Cyan
        
        # Test status command
        Write-Host "Testing status command..." -ForegroundColor Yellow
        .\k8s-lab.ps1 status kind github-test-kind
        
        # Test cluster verification
        Write-Host "Verifying cluster accessibility..." -ForegroundColor Yellow
        kubectl get nodes -o wide
        kubectl get pods -A
        
        Write-Host "‚úÖ Main script integration test passed!" -ForegroundColor Green
        
    - name: Enhanced demo application on Kind
      if: github.event.inputs.skip_cluster_creation != 'true'
      shell: pwsh
      run: |
        Write-Host "üß™ Enhanced demo application testing on Kind..." -ForegroundColor Cyan
        
        try {
          # Deploy demo app
          Write-Host "Deploying demo application..." -ForegroundColor Yellow
          kubectl apply -f demo-app\demo-app.yaml
          
          # Enhanced waiting with progress monitoring
          Write-Host "Waiting for pods to be ready (enhanced monitoring)..." -ForegroundColor Yellow
          $timeout = 300
          $elapsed = 0
          $interval = 15
          
          do {
            $pods = kubectl get pods -l app=microservices-demo -o jsonpath='{.items[*].status.phase}' 2>$null
            if ($pods) {
              $readyPods = ($pods -split ' ' | Where-Object { $_ -eq 'Running' }).Count
              $totalPods = ($pods -split ' ').Count
              Write-Host "  Ready pods: $readyPods/$totalPods" -ForegroundColor Gray
              
              if ($readyPods -eq $totalPods -and $totalPods -gt 0) {
                Write-Host "‚úÖ All pods are ready!" -ForegroundColor Green
                break
              }
            }
            
            Start-Sleep -Seconds $interval
            $elapsed += $interval
          } while ($elapsed -lt $timeout)
          
          if ($elapsed -ge $timeout) {
            Write-Host "‚ùå Timeout waiting for pods to be ready" -ForegroundColor Red
            kubectl describe pods -l app=microservices-demo
            kubectl get events --sort-by=.metadata.creationTimestamp | Select-Object -Last 10
            exit 1
          }
          
          # Check deployment status
          kubectl get pods -o wide
          kubectl get svc
          
          # Enhanced cluster and service info
          Write-Host "üìä Enhanced cluster information:" -ForegroundColor Cyan
          kubectl cluster-info
          kubectl get nodes -o wide
          
          Write-Host "‚úÖ Enhanced demo application deployment on Kind test passed!" -ForegroundColor Green
          
        } catch {
          Write-Host "‚ùå Enhanced demo deployment on Kind failed: $($_.Exception.Message)" -ForegroundColor Red
          
          # Enhanced error diagnostics
          Write-Host "üîç Enhanced error diagnostics:" -ForegroundColor Yellow
          kubectl describe pods -l app=microservices-demo
          kubectl get events --sort-by=.metadata.creationTimestamp | Select-Object -Last 20
          kind get clusters
          docker ps --filter "label=io.x-k8s.kind.cluster"
          
          exit 1
        }
        
    - name: Cleanup Kind
      if: always()
      shell: pwsh
      run: |
        Write-Host "üßπ Cleaning up Kind resources..." -ForegroundColor Cyan
        try {
          kind delete cluster --name github-test-kind
          Write-Host "‚úÖ Kind cleanup completed" -ForegroundColor Green
        } catch {
          Write-Host "‚ö†Ô∏è Kind cleanup failed (this is expected if cluster creation failed)" -ForegroundColor Yellow
        }

  # Job 3: Generate comprehensive test report
  generate-test-report:
    runs-on: windows-latest
    name: Generate Test Report
    needs: [test-minikube-lab, test-kind-lab]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate comprehensive test report
      shell: pwsh
      run: |
        Write-Host "üìä Generating comprehensive test report..." -ForegroundColor Cyan
        
        $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
        $minikubeResult = "${{ needs.test-minikube-lab.result }}"
        $kindResult = "${{ needs.test-kind-lab.result }}"
        $testEnv = "${{ github.event.inputs.test_environment }}"
        $testDepth = "${{ github.event.inputs.test_depth }}"
        $skipCluster = "${{ github.event.inputs.skip_cluster_creation }}"
        $enableDebug = "${{ github.event.inputs.enable_debugging }}"
        
        if ([string]::IsNullOrEmpty($testEnv)) { $testEnv = "both" }
        if ([string]::IsNullOrEmpty($testDepth)) { $testDepth = "standard" }
        
        $report = "# üß™ Enhanced Minikube and Kind Labs Test Report`n`n"
        $report += "**Test Run:** $timestamp`n"
        $report += "**Repository:** ${{ github.repository }}`n"
        $report += "**Branch:** ${{ github.ref_name }}`n"
        $report += "**Commit:** ${{ github.sha }}`n"
        $report += "**Workflow:** ${{ github.workflow }}`n"
        $report += "**Test Environment:** $testEnv`n"
        $report += "**Test Depth:** $testDepth`n"
        $report += "**Skip Cluster Creation:** $skipCluster`n"
        $report += "**Debug Mode:** $enableDebug`n`n"
        
        $report += "## üéØ Enhanced Test Results Summary`n`n"
        $report += "| Test Type | Status | Enhanced Features | Notes |`n"
        $report += "|-----------|---------|-------------------|-------|`n"
        
        # Minikube results
        if ($testEnv -eq "both" -or $testEnv -eq "minikube") {
          $status = if ($minikubeResult -eq "success") { "‚úÖ PASSED" } else { "‚ùå FAILED" }
          $features = "Progress monitoring, Enhanced diagnostics, Improved error handling"
          $report += "| Minikube Lab | $status | $features | Full cluster creation and testing |`n"
        }
        
        # Kind results
        if ($testEnv -eq "both" -or $testEnv -eq "kind") {
          $status = if ($kindResult -eq "success") { "‚úÖ PASSED" } else { "‚ùå FAILED" }
          $features = "Progress monitoring, Enhanced diagnostics, Cluster info display"
          $report += "| Kind Lab | $status | $features | Full cluster creation and testing |`n"
        }
        
        $report += "`n## Test Environment Details`n`n"
        $report += "- **Runner OS:** Windows Latest`n"
        $report += "- **PowerShell Version:** $($PSVersionTable.PSVersion)`n"
        $report += "- **Minikube Version:** ${{ env.MINIKUBE_VERSION }}`n"
        $report += "- **Kind Version:** ${{ env.KIND_VERSION }}`n"
        $report += "- **kubectl Version:** ${{ env.KUBECTL_VERSION }}`n`n"
        
        $report += "## üß™ Enhanced Tests Performed`n`n"
        $report += "### Script Validation`n"
        $report += "- ‚úÖ PowerShell syntax validation`n"
        $report += "- ‚úÖ Setup script execution`n"
        $report += "- ‚úÖ Main k8s-lab.ps1 integration`n`n"
        
        if ($skipCluster -ne "true") {
          $report += "### Enhanced Cluster Operations`n"
          $report += "- ‚úÖ Cluster creation and configuration`n"
          $report += "- ‚úÖ Enhanced node accessibility and health checks`n"
          $report += "- ‚úÖ Enhanced demo application deployment with progress monitoring`n"
          $report += "- ‚úÖ Enhanced service accessibility verification`n"
          $report += "- ‚úÖ Enhanced error diagnostics and reporting`n"
          $report += "- ‚úÖ Proper cleanup procedures with system pruning`n`n"
        }
        
        $report += "### Enhanced Monitoring Features`n"
        $report += "- üîç **Docker Health:** Multi-point validation with consecutive success requirement`n"
        $report += "- üìä **Pod Monitoring:** Real-time readiness tracking with progress indicators`n"
        $report += "- üåê **Service Verification:** Enhanced connectivity and accessibility testing`n"
        $report += "- üîß **Error Diagnostics:** Comprehensive error collection and detailed reporting`n"
        $report += "- üßπ **Cleanup Monitoring:** Enhanced cleanup with system resource management`n`n"
        
        $report += "## Files Tested`n`n"
        $report += "- **Main Script:** k8s-lab.ps1`n"
        $report += "- **Minikube Setup:** minikube-lab/setup-minikube.ps1`n"
        $report += "- **Kind Setup:** kind-lab/setup-kind.ps1`n"
        $report += "- **Demo Application:** demo-app/demo-app.yaml`n"
        $report += "- **Configuration:** kind-config.yaml`n`n"
        
        # Overall status
        $overallStatus = "‚úÖ SUCCESS"
        if ($minikubeResult -eq "failure" -or $kindResult -eq "failure") {
          $overallStatus = "‚ùå FAILURE"
        }
        
        $report += "## Overall Result: $overallStatus`n`n"
        
        if ($overallStatus -eq "‚ùå FAILURE") {
          $report += "### Failed Tests`n"
          if ($minikubeResult -eq "failure") {
            $report += "- ‚ùå Minikube Lab test failed`n"
          }
          if ($kindResult -eq "failure") {
            $report += "- ‚ùå Kind Lab test failed`n"
          }
          $report += "`nPlease check the workflow logs for detailed error information.`n`n"
        }
        
        $report += "## Next Steps`n`n"
        $report += "1. Review any failed tests in the detailed workflow logs`n"
        $report += "2. Verify cluster configuration and resource availability`n"
        $report += "3. Test locally to reproduce any issues`n"
        $report += "4. Update scripts based on test results`n`n"
        
        $report += "---`n"
        $report += "*Generated by GitHub Actions - K8s Lab Test Suite*"
        
        $report | Out-File -FilePath "test-report-labs.md" -Encoding UTF8
        Write-Host "‚úÖ Test report generated: test-report-labs.md" -ForegroundColor Green
        
    - name: Upload test report
      uses: actions/upload-artifact@v4
      with:
        name: k8s-labs-test-report-${{ github.run_number }}
        path: test-report-labs.md
        retention-days: 30
        
    - name: Display final summary
      shell: pwsh
      run: |
        Write-Host "`nüéØ Final Test Summary" -ForegroundColor Magenta
        Write-Host "=" * 60 -ForegroundColor Blue
        
        $minikubeResult = "${{ needs.test-minikube-lab.result }}"
        $kindResult = "${{ needs.test-kind-lab.result }}"
        $testEnv = "${{ github.event.inputs.test_environment }}"
        
        if ([string]::IsNullOrEmpty($testEnv)) { $testEnv = "both" }
        
        Write-Host "üîß Test Environment: $testEnv" -ForegroundColor Cyan
        
        if ($testEnv -eq "both" -or $testEnv -eq "minikube") {
          $status = if ($minikubeResult -eq "success") { "‚úÖ PASSED" } else { "‚ùå FAILED" }
          Write-Host "üöÄ Minikube Lab: $status" -ForegroundColor $(if ($minikubeResult -eq "success") { "Green" } else { "Red" })
        }
        
        if ($testEnv -eq "both" -or $testEnv -eq "kind") {
          $status = if ($kindResult -eq "success") { "‚úÖ PASSED" } else { "‚ùå FAILED" }
          Write-Host "üéØ Kind Lab: $status" -ForegroundColor $(if ($kindResult -eq "success") { "Green" } else { "Red" })
        }
        
        Write-Host "üìä Test report uploaded as artifact" -ForegroundColor Yellow
        Write-Host "`nüéâ K8s Labs testing completed!" -ForegroundColor Green
